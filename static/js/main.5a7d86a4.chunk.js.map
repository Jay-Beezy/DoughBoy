{"version":3,"sources":["routes/doughboy.js","App.js","index.js"],"names":["DoughBoy","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","daysAhead","day","targetDate","Date","setDate","getDate","current_day","current_month","getMonth","getFutureDate","int_day","parseInt","document","getElementById","value","final_day","console","log","isNaN","setState","prevState","newRow","daysOut","futureDate","rowData","concat","toConsumableArray","state","colData","field","sortable","sort","sortingOrder","width","cellStyle","color","fontSize","showModal","react_default","a","createElement","Fragment","className","role","aria-label","style","height","main","columnDefs","onCellDoubleClicked","reactjs_popup_esm","id","contentStyle","background","border","padding","overlayStyle","arrowStyle","trigger","position","type","onClick","React","Component","App","_useState","useState","_useState2","slicedToArray","doughboy","require","ReactDOM","createRoot","render","react_router_dom","react_router","path","element","App_App"],"mappings":"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","file":"static/js/main.5a7d86a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AgGridReact} from 'ag-grid-react';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\n\r\nimport '../App.css'\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\n\r\nclass DoughBoy extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rowData: [\r\n                { daysOut: 5, futureDate: this.daysAhead(5) },\r\n                { daysOut: 6, futureDate: this.daysAhead(6) },\r\n                { daysOut: 7, futureDate: this.daysAhead(7) },\r\n                { daysOut: 8, futureDate: this.daysAhead(8) },\r\n                { daysOut: 10, futureDate: this.daysAhead(10) },\r\n                { daysOut: 14, futureDate: this.daysAhead(14) },\r\n                { daysOut: 18, futureDate: this.daysAhead(18) },\r\n                { daysOut: 21, futureDate: this.daysAhead(21) },\r\n                { daysOut: 30, futureDate: this.daysAhead(30) },\r\n                { daysOut: 40, futureDate: this.daysAhead(40) },\r\n                { daysOut: 45, futureDate: this.daysAhead(45) },\r\n                { daysOut: 90, futureDate: this.daysAhead(90) },\r\n            ],\r\n            colData: [\r\n                {field:\"daysOut\", sortable: true, sort: 'asc', sortingOrder: ['asc', 'desc'], width:155, cellStyle: {color: 'yellow', fontSize: '15px'}},\r\n                {field:\"futureDate\", width:155, cellStyle: {color: 'yellow', fontSize: '15px'}}\r\n            ]\r\n        };\r\n    }\r\n\r\n    daysAhead = function(day) {\r\n        const targetDate = new Date();\r\n        targetDate.setDate(targetDate.getDate() + day);\r\n        let current_day = targetDate.getDate();\r\n        let current_month = targetDate.getMonth() + 1; //0 is January\r\n        //let current_year = targetDate.getFullYear();\r\n        let testy = this.getMonth(current_month);\r\n        let dateString = testy + ' ' + current_day; // + ' ' + current_year + '';\r\n        return dateString;\r\n    }\r\n\r\n    getMonth = function(day) {\r\n        if (day === 1) {\r\n            return 'Jan';\r\n          }\r\n          if (day === 2) {\r\n            return 'Feb';\r\n          }\r\n          if (day === 3) {\r\n            return 'March';\r\n          }\r\n          if (day === 4) {\r\n            return 'April';\r\n          }\r\n          if (day === 5) {\r\n            return 'May';\r\n          }\r\n          if (day === 6) {\r\n            return 'June';\r\n          }\r\n          if (day === 7) {\r\n            return 'July';\r\n          }\r\n          if (day === 8) {\r\n            return 'Aug';\r\n          }\r\n          if (day === 9) {\r\n            return 'Sept';\r\n          }\r\n          if (day === 10) {\r\n            return 'Oct';\r\n          }\r\n          if (day === 11) {\r\n            return 'Nov';\r\n          }\r\n          if (day === 12) {\r\n            return 'Dec';\r\n          }\r\n    }\r\n\r\n    getFutureDate = () => {\r\n        var int_day = parseInt(document.getElementById(\"myFutureInput\").value, 10);\r\n        var final_day = this.daysAhead(int_day);\r\n\r\n        console.log(int_day);\r\n\r\n        if(isNaN(int_day) === false){ //Validates that a number is being passed in\r\n            this.setState((prevState, props) => {\r\n                const newRow = {\r\n                    daysOut: int_day,\r\n                    futureDate: final_day\r\n                }\r\n                return { rowData : [...this.state.rowData, newRow] };\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n    onCellDoubleClicked = (params: CellDoubleClickedEvent) => {\r\n        console.log('Cell was double clicked');\r\n    }\r\n    */\r\n\r\n    render() {\r\n        const {showModal} = this.props;\r\n        return (\r\n            <React.Fragment>\r\n            <div className=\"title\">\r\n            <span role=\"img\" aria-label=\"Bread\">üçû</span> DoughBoy <span role=\"img\" aria-label=\"Baguette\">ü•ñ</span>\r\n            </div>\r\n            <div className=\"ag-theme-alpine\" style={{ height: '600px', width: '312px' }}>\r\n                <AgGridReact className=\"AgGridReact\"\r\n                    rowData={this.state.rowData}\r\n                    columnDefs={this.state.colData}\r\n                    onCellDoubleClicked={this.onCellDoubleClicked}\r\n                    >\r\n                </AgGridReact>\r\n            </div>\r\n            <br></br>\r\n            <div className=\"popup\">\r\n                <Popup id=\"Submit_Window\" className=\"windowPopup\" \r\n                contentStyle={{\r\n                    background: '#128b22',\r\n                    border: '2px solid black',\r\n                    padding: '10px 10px'\r\n                }}\r\n                overlayStyle={{\r\n                    \r\n                }}\r\n                arrowStyle={{\r\n                    color: '#128b22',\r\n                }}\r\n                trigger={<button> Add Entry </button>} position=\"bottom center\"\r\n                >\r\n                <div className=\"windowText\">Enter Days Out\r\n                <input type=\"number\" id=\"myFutureInput\"></input>\r\n                <td onClick={this.getFutureDate}>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    Submit</td>\r\n                </div>\r\n                </Popup>\r\n            </div>\r\n            <br></br><br></br><br></br><br></br><br></br><br></br>\r\n     </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DoughBoy;","import React, {useState} from 'react';\nimport './App.css'\nimport DoughBoy from './routes/doughboy';\n\nexport default function App() {\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <DoughBoy>\n    </DoughBoy>\n  );\n}","import React from 'react';\nimport ReactDOM from \"react-dom/client\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport DoughBoy from \"./routes/doughboy\";\nimport './index.css'\n\nrequire('typeface-shrikhand')\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\")\n);\n\nroot.render( \n<BrowserRouter>\n  <Routes>\n    <Route path=\"/\" element={<App />} />\n    <Route path=\"doughboy\" element={<DoughBoy />} />\n  </Routes>\n</BrowserRouter>\n);"],"sourceRoot":""}